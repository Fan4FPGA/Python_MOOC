#-*- coding:utf-8 -*-
#一维数据的格式化处理

#数据组织的维度
#一维数据的表示
#一维数据的处理
#一维数据的存储
'''---------------------------------------------------------------------------------------
#一维数据：由对等关系的有序或无序数据构成，采用线性方式组织。
#对应列表，数组和集合等概念

#二维数据：由多个一维数据构成，是一维数据的组合形式
#表格是典型的二维数据表现形式
#表头是二维数据的一部分

#多维数据
由一维数据和二维数据在新的维度上的扩展，例如加上时间的维度等


高位数据
仅利用最基本的二元关系展示数据间的复杂结构
键值对
.eg
{
    "FirstName":"FAN",
    "LastName":"Dongshan",
    "Adress":｛
                "StreetAddr":"XXXXX",
                "City":"XXXXX"
                "ZipCode":"xxxxx"
              ｝,
    "professional":["Computer","SSSSS"]
}

数据的操作周期
存储 <-> 表示 <-> 操作

-----------------------------------------------------------------------------------------'''

'''-----------------------------------------------------------------------------------------
一维数据的表示
如果数据间数据有序，使用列表类型
ls = [3.12,3.11,3.13]

for 循环可以遍历数据，从而对每个数据进行操作

如果数据无序可以使用 集合类型
st = {3.12,3.11,3.13}
for 循环可以遍历数据，从而对每个数据进行操作


一维数据的存储
存储方式一：空格分隔
CN USA JP FR 
使用空格分隔,不换行（/n）
缺点：数据中不能存在空格


存储方式二：逗号分隔
CN,USA,JP,FR
使用英文半角逗号分隔，不换行（/n）
缺点：数据中不能存在逗号


存储方式二：其他符号
CN$USA$JP$FR
使用其他符号或者符号组合分隔，建议采用特殊符号，不换行(/n)
缺点：需要根据数据特点定义，通过性较差



数据的处理
-1将存储数据读入程序
-2将程序表示的数据写入


e.g.
从空格分隔的文件中读入数据
CN USA JP FR 

txt = open(filename).read()
ls = txt.split("")
f.close()

ls = ['CN','USA','JP','FR']


e.g.
从特殊符号分隔的文件中读入数据
CN$USA$JP$FR
txt = open(filename).read()
ls = txt.split("$")
f.close()

ls = ['CN','USA','JP','FR']

一维数据数据写入
采用空格分隔
ls = ['CN','USA','JP','FR']
f = open(filename,'w')
f.write(' '.join(ls))
f.close()

采用特殊符号分隔
ls = ['CN','USA','JP','FR']
f = open(filename,'w')
f.write('$'.join(ls))
f.close()

总结
字符串方法：.join()  .split()

--------------------------------------------------------------------------------------------'''

ls = ['CN','USA','JP','FR']
f = open("filename1.txt",'w')
f.write(' '.join(ls))
f.close()
f = open("filename2.txt",'w')
f.write('$'.join(ls))
f.close()

txt = open("filename1.txt").read()
ls1 = txt.split(" ")
print(ls1)
f.close()
txt = open("filename2.txt").read()
ls2 = txt.split("$")
print(ls2)
f.close()